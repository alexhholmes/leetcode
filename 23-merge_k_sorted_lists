/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeKLists(lists []*ListNode) *ListNode {
    if len(lists) == 0 {
        return nil
    } else if len(lists) == 1 {
        return lists[0]
    } else if len(lists) == 2 {
        return mergeLists(lists[0], lists[1])
    }

    mid := len(lists) / 2
    left := mergeKLists(lists[:mid])
    right := mergeKLists(lists[mid:])

    return mergeLists(left, right)
}

func mergeLists(list1 *ListNode, list2 *ListNode) *ListNode {
    dummy := &ListNode{}
    prev := dummy

    for list1 != nil && list2 != nil {
        if list1.Val < list2.Val {
            prev.Next = list1
            list1 = list1.Next
        } else {
            prev.Next = list2
            list2 = list2.Next
        }
        prev = prev.Next
    }

    if list1 != nil {
        prev.Next = list1
    } else if list2 != nil {
        prev.Next = list2
    }

    return dummy.Next
}

